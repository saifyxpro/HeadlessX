```mermaid
sequenceDiagram
    participant Client as Client Application
    participant NextJS as Next.js Frontend
    participant Gateway as API Gateway
    participant Auth as Auth Middleware
    participant RateLimit as Rate Limiter
    participant API as Express API
    participant Controller as Controller
    participant Service as Service Layer
    participant AI as AI Service
    participant Browser as Playwright
    participant DB as Database
    participant Cache as Redis Cache
    participant Queue as Job Queue
    participant WS as WebSocket
    
    %% Authentication Flow
    rect rgb(200, 230, 255)
        Note over Client,Auth: Authentication Phase
        Client->>NextJS: POST /api/auth/login
        NextJS->>Gateway: Forward Request
        Gateway->>Auth: Validate Credentials
        Auth->>DB: Check User
        DB-->>Auth: User Data
        Auth->>Auth: Generate JWT
        Auth-->>Gateway: JWT + Refresh Token
        Gateway-->>NextJS: Auth Response
        NextJS-->>Client: Set Cookies + Return User
    end
    
    %% API Request Flow
    rect rgb(230, 255, 230)
        Note over Client,Cache: Scraping Request Flow
        Client->>NextJS: POST /api/scrape {url, config}
        NextJS->>Gateway: Forward with JWT
        Gateway->>Auth: Verify JWT
        Auth->>Cache: Check Token
        Cache-->>Auth: Valid Token
        Auth->>RateLimit: Check Rate Limit
        RateLimit->>Cache: Get Request Count
        Cache-->>RateLimit: Count: 45/100
        RateLimit-->>Gateway: Allow Request
        Gateway->>API: Authorized Request
    end
    
    %% Processing Flow
    rect rgb(255, 245, 230)
        Note over API,Browser: Scraping Execution
        API->>Controller: Route to ScraperController
        Controller->>Controller: Validate Input
        Controller->>DB: Create Job Record
        DB-->>Controller: Job ID: 12345
        Controller->>Queue: Add to Job Queue
        Queue-->>Controller: Job Queued
        Controller-->>Client: 202 Accepted {jobId: 12345}
        
        Note over WS,Client: Real-time Updates
        Controller->>WS: Subscribe Job Updates
        WS-->>Client: WebSocket Connection
        
        Queue->>Service: Process Job 12345
        Service->>Cache: Check Cache
        Cache-->>Service: Cache Miss
        
        Service->>AI: Get Optimal Strategy
        AI->>AI: Analyze Target URL
        AI->>AI: Select Best Profile
        AI-->>Service: Recommended Config
        
        Service->>Service: Apply AI Config
        Service->>Browser: Launch Browser
        Browser-->>Service: Browser Instance
        
        Service->>Browser: Navigate to URL
        WS->>Client: Event: navigation_started
        Browser-->>Service: Page Loaded
        WS->>Client: Event: page_loaded (25%)
        
        Service->>AI: Get Behavioral Pattern
        AI-->>Service: Mouse/Keyboard Pattern
        
        Service->>Browser: Apply Stealth
        Service->>Browser: Inject Scripts
        Service->>Browser: Simulate Behavior
        WS->>Client: Event: behavior_applied (50%)
        
        Service->>Browser: Extract Data
        Browser-->>Service: Extracted Content
        WS->>Client: Event: data_extracted (75%)
        
        Service->>Service: Process & Clean Data
        Service->>AI: Validate Data Quality
        AI-->>Service: Quality Score: 95%
        
        Service->>Browser: Close Browser
        Browser-->>Service: Closed
        
        Service->>Cache: Store Result
        Cache-->>Service: Cached
        
        Service->>DB: Update Job Status
        DB-->>Service: Updated
        
        WS->>Client: Event: job_completed (100%)
        Service-->>Queue: Job Complete
    end
    
    %% Result Retrieval
    rect rgb(255, 230, 255)
        Note over Client,Cache: Result Retrieval
        Client->>NextJS: GET /api/jobs/12345
        NextJS->>Gateway: Forward Request
        Gateway->>Auth: Verify JWT
        Auth-->>Gateway: Valid
        Gateway->>API: Get Job 12345
        API->>Controller: JobController.getJob
        Controller->>Cache: Check Cache
        Cache-->>Controller: Cache Hit
        Controller-->>API: Job Results
        API-->>Gateway: Response Data
        Gateway-->>NextJS: JSON Response
        NextJS-->>Client: Formatted Results
    end
    
    %% Export Flow
    rect rgb(245, 245, 255)
        Note over Client,DB: Data Export
        Client->>NextJS: POST /api/export {jobId, format}
        NextJS->>API: Export Request
        API->>Controller: ExportController
        Controller->>DB: Get Job Data
        DB-->>Controller: Raw Data
        Controller->>Service: Transform Data
        Service->>Service: Convert to CSV/Excel
        Service-->>Controller: File Buffer
        Controller-->>API: File Stream
        API-->>NextJS: Download Response
        NextJS-->>Client: File Download
    end
    
    %% Error Handling
    rect rgb(255, 230, 230)
        Note over Service,Client: Error Scenario
        Service->>Browser: Navigate to Protected URL
        Browser-->>Service: Detection Triggered
        Service->>AI: Analyze Detection
        AI-->>Service: WAF Type: Cloudflare
        Service->>AI: Get Evasion Strategy
        AI-->>Service: Strategy: Advanced Bypass
        Service->>Browser: Apply New Strategy
        Browser-->>Service: Still Detected
        Service->>Service: Max Retries Reached
        Service->>DB: Update Job Failed
        WS->>Client: Event: job_failed
        Service-->>Queue: Job Failed
        Client->>NextJS: GET /api/jobs/12345
        NextJS->>API: Get Failed Job
        API-->>NextJS: Error Details + Suggestions
        NextJS-->>Client: Show Error + AI Suggestions
    end
    
    %% Analytics Flow
    rect rgb(230, 245, 255)
        Note over Client,DB: Analytics Request
        Client->>NextJS: GET /api/analytics
        NextJS->>API: Analytics Request
        API->>Controller: AnalyticsController
        Controller->>DB: Query Metrics
        DB-->>Controller: Aggregated Data
        Controller->>Cache: Cache Analytics
        Controller-->>API: Chart Data
        API-->>NextJS: Analytics Response
        NextJS-->>Client: Render Charts
    end
```
